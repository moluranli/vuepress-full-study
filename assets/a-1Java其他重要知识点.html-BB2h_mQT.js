import{_ as e,c as l,d as s,o as t}from"./app-BbnBv0J5.js";const n={};function r(i,a){return t(),l("div",null,a[0]||(a[0]=[s('<h2 id="_1-java的值传递" tabindex="-1"><a class="header-anchor" href="#_1-java的值传递"><span>1. Java的值传递</span></a></h2><ul><li>java中都是值传递,没有引用传递</li><li>java的参数如果是基础类型,那么会创建一个<strong>基础类型的副本</strong>,无论怎么改变副本的值,原值都不会改变</li><li>java的参数如果是引用类型,传递的就是<strong>地址的副本</strong>,因为是指向的同一个地址,所以如果值改变,那么原值也会发生改变</li></ul><h2 id="_2-java的序列号与反序列化" tabindex="-1"><a class="header-anchor" href="#_2-java的序列号与反序列化"><span>2. Java的序列号与反序列化</span></a></h2><p><strong>序列号</strong>就是将数据结构或者是对象转变为二进制的形式</p><p><strong>反序列化</strong>相反</p><h3 id="_2-1-java序列化的应用场景" tabindex="-1"><a class="header-anchor" href="#_2-1-java序列化的应用场景"><span>2.1 Java序列化的应用场景</span></a></h3><ol><li><strong>网络传输</strong>,比如Socket传输过程中要对数据进行转换</li><li>将对象存储到<strong>文件</strong>中和从文件中读取对象</li><li>将对象存储到<strong>缓存数据库</strong>比如<strong>Redis</strong>当中,和从Redis中取出对象</li></ol><h3 id="_2-2-java序列化方式" tabindex="-1"><a class="header-anchor" href="#_2-2-java序列化方式"><span>2.2 Java序列化方式</span></a></h3><p>详见: <a href="https://javaguide.cn/java/basis/serialization.html#jdk-%E8%87%AA%E5%B8%A6%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E6%96%B9%E5%BC%8F" target="_blank" rel="noopener noreferrer">序列化方式</a></p><h2 id="_3-java的反射机制" tabindex="-1"><a class="header-anchor" href="#_3-java的反射机制"><span>3. Java的反射机制</span></a></h2><h3 id="_3-1-反射机制的应用场景-业务场景中很少用到" tabindex="-1"><a class="header-anchor" href="#_3-1-反射机制的应用场景-业务场景中很少用到"><span>3.1 反射机制的应用场景(业务场景中很少用到)</span></a></h3><ol><li><strong>JDK实现动态代理</strong>,使用了反射类<strong>Method</strong></li><li><strong>Java注解</strong>,基于反射分析类,获取类上的注解</li></ol><h3 id="_3-2-获取class对象的四种方法" tabindex="-1"><a class="header-anchor" href="#_3-2-获取class对象的四种方法"><span>3.2 获取Class对象的四种方法</span></a></h3><p>详见:<a href="https://javaguide.cn/java/basis/reflection.html#%E8%8E%B7%E5%8F%96-class-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F" target="_blank" rel="noopener noreferrer">获取 Class 对象的四种方式</a></p><ol><li><p>直接通过Stu.class获取</p></li><li><p>通过Class.forName(&quot;路径&quot;)</p></li><li><p>通过stu.getClass()</p></li><li><p>通过类加载器ClassLoader.loadClass(&quot;类路径&quot;)</p></li></ol><h3 id="_3-3-反射的基本操作" tabindex="-1"><a class="header-anchor" href="#_3-3-反射的基本操作"><span>3.3 反射的基本操作</span></a></h3><p><a href="https://javaguide.cn/java/basis/reflection.html#%E5%8F%8D%E5%B0%84%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C" target="_blank" rel="noopener noreferrer">反射的基本操作</a></p><h2 id="常见的io操作" tabindex="-1"><a class="header-anchor" href="#常见的io操作"><span>常见的IO操作</span></a></h2><p>IO操作实际上是调用了系统的操作,因为用户本身并没有权限来访问内核空间,所以实现IO操作实际上是</p><ol><li>内核等待IO设备准备</li><li>内核将数据从内核拷贝到用户</li></ol>',20)]))}const h=e(n,[["render",r]]),c=JSON.parse('{"path":"/202306%E7%A7%8B%E6%8B%9B%E5%87%86%E5%A4%87-%E6%97%A7/a-1Java%E5%85%B6%E4%BB%96%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"1. Java的值传递","slug":"_1-java的值传递","link":"#_1-java的值传递","children":[]},{"level":2,"title":"2. Java的序列号与反序列化","slug":"_2-java的序列号与反序列化","link":"#_2-java的序列号与反序列化","children":[{"level":3,"title":"2.1 Java序列化的应用场景","slug":"_2-1-java序列化的应用场景","link":"#_2-1-java序列化的应用场景","children":[]},{"level":3,"title":"2.2 Java序列化方式","slug":"_2-2-java序列化方式","link":"#_2-2-java序列化方式","children":[]}]},{"level":2,"title":"3. Java的反射机制","slug":"_3-java的反射机制","link":"#_3-java的反射机制","children":[{"level":3,"title":"3.1 反射机制的应用场景(业务场景中很少用到)","slug":"_3-1-反射机制的应用场景-业务场景中很少用到","link":"#_3-1-反射机制的应用场景-业务场景中很少用到","children":[]},{"level":3,"title":"3.2 获取Class对象的四种方法","slug":"_3-2-获取class对象的四种方法","link":"#_3-2-获取class对象的四种方法","children":[]},{"level":3,"title":"3.3 反射的基本操作","slug":"_3-3-反射的基本操作","link":"#_3-3-反射的基本操作","children":[]}]},{"level":2,"title":"常见的IO操作","slug":"常见的io操作","link":"#常见的io操作","children":[]}],"git":{"updatedTime":1751969860000,"contributors":[{"name":"Full","username":"Full","email":"2285288446@qq.com","commits":2,"url":"https://github.com/Full"}],"changelog":[{"hash":"d9f3e89ac0c7f9658e85d517b2e341155ebeb4a4","time":1751969860000,"email":"2285288446@qq.com","author":"Full","message":"构建修复"},{"hash":"46fbbb649a2b30164a6d253dd0f5cfcdf1657353","time":1751960301000,"email":"2285288446@qq.com","author":"Full","message":"第一次添加内容"}]},"filePathRelative":"202306秋招准备-旧/a-1Java其他重要知识点.md"}');export{h as comp,c as data};
