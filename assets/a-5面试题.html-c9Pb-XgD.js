import{_ as o,c as r,d as t,o as s}from"./app-cTT5GjTp.js";const e={};function l(g,n){return s(),r("div",null,n[0]||(n[0]=[t('<h2 id="_18-java中的异常体系" tabindex="-1"><a class="header-anchor" href="#_18-java中的异常体系"><span>18. Java中的异常体系</span></a></h2><p><strong>Java</strong>的所有异常父类<strong>Throwable</strong></p><p><strong>Throwable</strong>有两个子类: <strong>Exception</strong>和<strong>Error</strong></p><p><strong>Error</strong>是错误,一旦出现,程序会自动停止</p><p><strong>Exception</strong>的子类分类: <strong>RunTimeException</strong>和<strong>CheckedException</strong></p><p>检测异常一般不会出现,<strong>会导致编译过程中,编译不通过</strong></p><p>运行时异常在程序执行过程中,<strong>一般导致线程执行失败</strong></p><h2 id="_19-gc如何判断垃圾回收" tabindex="-1"><a class="header-anchor" href="#_19-gc如何判断垃圾回收"><span>19. GC如何判断垃圾回收</span></a></h2><p>首先垃圾回收有<strong>两种算法</strong>:</p><ul><li><p><strong>引用计数法</strong>: 如果这个对象<strong>被其他对象所引用</strong>,那么<strong>引用计数加一</strong>,<strong>释放引用</strong>的时候<strong>引用减一</strong>,如果<strong>计数为0</strong>,则代表此对象可以被<strong>回收</strong></p><blockquote><p>[!Tip]</p><p>如果A对象引用B对象,A对象引用计数加一,同时B对象应用A对象,B对象的计数加一,就会出现A对象和B对象都无法被回收的场面</p></blockquote></li><li><p><strong>可达性分析算法</strong>: 有一个<strong>GC Root</strong>,当一个对象到<strong>GC Root</strong>没有引用链的时候,代表该对象可以被回收,Java的GC就是采用这种垃圾回收算法</p><p>相关文章 :<a href="https://blog.csdn.net/weixin_38007185/article/details/108093716" target="_blank" rel="noopener noreferrer">GC Roots 是什么？哪些对象可以作为 GC Root？</a></p><p><strong>GC Root</strong>大概有一下4种类型</p><ol><li>本地方法栈中<strong>Native方法</strong>引用的对象</li><li><strong>虚拟机栈中</strong>引用的对象</li><li>方法区<strong>类静态属性</strong>引用的对象</li><li>方法区中<strong>常量</strong>引用的对象</li></ol><p><br>被<strong>GC Root</strong>不被引用的对象不一定一定要被回收: <strong>GC Root</strong>给了对象一次存活的机会</p><p>第一次进行可达性分析的时候,对象会被标记</p><p>第二次的时候,看对象是否覆盖了<strong>finalize()<strong>方法,如果没有覆盖,则直接回收,如果覆盖了,就会执行</strong>finalize()方法</strong>,然后再进行可达性分析</p></li></ul><h2 id="_20-线程的生命周期-线程的几种状态" tabindex="-1"><a class="header-anchor" href="#_20-线程的生命周期-线程的几种状态"><span>20. 线程的生命周期,线程的几种状态</span></a></h2><p>线程的5种状态: <strong>创建,就绪,运行,阻塞,死亡</strong></p><ol><li><strong>创建</strong>: 新建一个线程对象</li><li><strong>就绪</strong>: 调用线程的<code>start()</code>方法,等待获取CPU的使用权</li><li><strong>运行</strong>: 执行程序</li><li><strong>阻塞</strong><ol><li><strong>等待阻塞</strong>: 调用了程序的<code>wait()</code> 方法,线程释放占用的资源,在等待池中,等待其他线程调佣<code>notify()</code>和<code>notifyAll()</code>方法后才被唤醒</li><li><strong>同步阻塞</strong>:线程在拿到同步锁的时候,同步锁被其他线程占用,线程进入锁池等待</li><li><strong>其他阻塞</strong>:线程执行了<code>sleep()</code>或<code>join()</code>方法,或者是I/O请求,当执行时间到了,就会让线程进入就绪状态.</li></ol></li><li><strong>死亡</strong>: 线程执行完毕,或者发生异常</li></ol><h2 id="_21-wait-sleep-join-yield" tabindex="-1"><a class="header-anchor" href="#_21-wait-sleep-join-yield"><span>21. wait(),sleep(),join(),yield()</span></a></h2><p>**sleep()<strong>和</strong>wait()**的区别?</p><ol><li><strong>sleep()<strong>是</strong>Thread</strong>类中的静态方法,而<strong>wait()<strong>是</strong>Object</strong>中的方法</li><li>sleep不依赖于<strong>synchornized</strong>,而wait()依赖</li><li><strong>sleep</strong>不会释放锁,而**wait()**会释放锁</li></ol><p><strong>yield()<strong>是释放锁之后是就绪状态,这就表示线程依然可以抢到</strong>CPU</strong>资源</p><p><strong>join()<strong>执行之后,如果A调用B的</strong>join</strong>方法,那么<strong>A线程阻塞</strong>,直到<strong>B线程结束或者中断</strong>,<strong>A线程才可以运行</strong></p><h2 id="_22-看待线程安全问题" tabindex="-1"><a class="header-anchor" href="#_22-看待线程安全问题"><span>22. 看待线程安全问题</span></a></h2><p><strong>线程安全</strong>是指多个线程访问同一个对象的时候,都可以得到一个正确的结果,就是和单线程访问的时候可以得到同样的结果</p><p>jvm的栈就是线程安全的,每个线程拥有一块独立的栈内存</p><p>而jvm里面的堆就是线程不安全的,因为堆内存是线程共有的</p><h2 id="_23-thread和runable" tabindex="-1"><a class="header-anchor" href="#_23-thread和runable"><span>23. Thread和Runable</span></a></h2><h2 id="_24-守护线程" tabindex="-1"><a class="header-anchor" href="#_24-守护线程"><span>24. 守护线程</span></a></h2><p><strong>守护线程</strong>就是<strong>为非守护线程提供服务</strong>的线程</p><p>守护线程不会守护单独的一个线程,他会<strong>守护JVM中的所有非守护线程</strong>,如果所有的非守护线程都运行完成之后,守护线程会<strong>自动的结束</strong>,不会受到自己的控制.</p><p><strong>GC垃圾回收机制</strong>就是一个很典型的<strong>守护线程</strong>,当所有的线程都停止之后,就不会产生垃圾了,那么GC也就不用再次使用了,同是守护线程中创建的所有线程同样是守护线程</p><h2 id="_25-threadlocal的使用场景和原理" tabindex="-1"><a class="header-anchor" href="#_25-threadlocal的使用场景和原理"><span>25. ThreadLocal的使用场景和原理</span></a></h2><p>每一个<strong>Thread</strong>线程都有一个<strong>ThreadLocalMap</strong>类型的对象: <strong>ThreadLocals</strong>, 这里的entry存储的<strong>key</strong>为<strong>ThreadLocal</strong>对象,<strong>value</strong>存储的是用户自定义存储的值,同时<strong>entry</strong>是继承一个<strong>弱引用</strong>的一个类,因此如果没有强引用引用此对象,那么就会被垃圾回收</p><p>当用户使用<strong>set()<strong>函数的时候,<strong>ThreadLocal</strong>会想获取当前的线程对象,然后获取线程的</strong>ThreadLocalMap</strong>,然后通过<strong>ThreadLocal</strong>作为<strong>Key</strong>,自定义对象作为<strong>value进行</strong>存储,<strong>get()<strong>同理,每一个线程都有一个</strong>ThreadLocalMap</strong>,容器互不影响,所以没有线程安全问题</p><p><strong>使用场景:</strong></p><ol><li>在<strong>不同层</strong>之间进行<strong>传值</strong>,如果传递用户信息</li><li><strong>保存事务信息</strong></li><li>进行<strong>sql连接</strong>,Session<strong>会话管理</strong></li><li><strong>线程间数据隔离</strong></li></ol><blockquote><p>[!Tip]</p><p>Spring的jdbc connection就是通过ThreadLocal实现事务之间的隔离</p></blockquote><h2 id="_26-threadlocal的内存泄漏问题" tabindex="-1"><a class="header-anchor" href="#_26-threadlocal的内存泄漏问题"><span>26. ThreadLocal的内存泄漏问题</span></a></h2><p><strong>内存泄漏</strong>是该对象不会被使用,但是对象的内存却无法被回收</p><p><strong>产生原因</strong>:</p><p>因为<strong>ThreadLocalMap</strong>的<strong>entry</strong>中的<strong>key:ThreadLocal</strong>是真正的弱引用对象,而<strong>entry</strong>实际上是强引用</p><p>但没有强引用引用<strong>ThreadLocal</strong>的时候</p><h2 id="_27-并发-并行和串行" tabindex="-1"><a class="header-anchor" href="#_27-并发-并行和串行"><span>27. 并发,并行和串行</span></a></h2><p><strong>串行:</strong> 一个任务执行完成之后才能执行下一个任务,没有执行完成就不能执行下一个任务</p><p><strong>并行:</strong> 同一个时间内,多个任务共同执行,相当于一条高速公路</p><p><strong>并发:</strong> 同一个时间间隔内,多个任务交替进行</p><h2 id="_28-并发的三大特性" tabindex="-1"><a class="header-anchor" href="#_28-并发的三大特性"><span>28. 并发的三大特性</span></a></h2><p><strong>原子性,有序性,可见性</strong></p><p><strong>原子性:</strong> 当一条或者多条指令作为操作执行的之后,要么全部执行完毕,要么都不执行</p><p><strong>有序性:</strong> 指令运行过程中可能会发生<strong>指令重排序</strong>的问题,要保证指令不发生重排序,按照一定顺序执行</p><p><strong>可见性</strong>: 要求在一个线程执行过程中要能够看到其他指令对一个共享变量的修改</p><blockquote><p>[!Tip]</p><p><strong>volatile关键字</strong>可以保证有序性和可见性</p></blockquote><h2 id="_29-为什么使用线程池-线程池的相关参数" tabindex="-1"><a class="header-anchor" href="#_29-为什么使用线程池-线程池的相关参数"><span>29. 为什么使用线程池,线程池的相关参数</span></a></h2><p><strong>使用线程池的好处:</strong></p><ol><li>降低资源消耗, 防止反复创建和销毁线程消耗资源</li><li>提高反应时间, 任务进来不用创建线程,直接使用现有线程</li><li>提高线程可管理性, 将线程交给线程池管理</li></ol><p><strong>线程池的参数:</strong></p><ul><li><p><strong>corePoolSize</strong> --核心线程的数量</p><p>核心活动线程,核心线程创建后并不会被销毁</p></li><li><p><strong>maxinumPoolSize</strong> --最大线程数量</p><p>一般的活动线程为<strong>corePoolSize</strong>, 当出现峰值的时候,就会启用最大线程的数量</p></li><li><p><strong>keepAliveTime unit</strong> --除核心线程之外的空闲线程的存活时间</p><p>核心线程不会被销毁,但是非核心线程到时间后会被销毁</p></li><li><p><strong>workQueue</strong>: --任务队列</p><p>表示一个任务队列,比如核心线程数量为5, 最大线程数量为10, 队列可以存放10个任务那么如果进入10个任务,那么其中五个任务是在核心线程执行,另外5个任务是放在任务队列中,如果再进入6个任务,那么其中5个任务仍然在任务队列中,而现在会创建一个线程,并从任务队列中拿一个任务给线程</p></li><li><p><strong>ThreadFactory</strong> --线程工厂</p><p>用来创建线程来执行任务,可以使用默认的线程工厂,创造的线程不是守护线程,同时具有相同的优先级,同时也可以使用自定义默认工厂</p></li><li><p><strong>Handler</strong> --任务拒绝策略</p><p>一种是调用<code>shutdown()</code>函数关闭线程池,再提交任务会被拒绝,另一种是达到最大线程数量,没有能力执行任务会被拒绝</p></li></ul><h2 id="_30-线程池执行流程" tabindex="-1"><a class="header-anchor" href="#_30-线程池执行流程"><span>30. 线程池执行流程</span></a></h2><p><img src="https://s2.loli.net/2022/08/06/bWfsz1Zvc7LAqDr.png" alt="image-20220806144132245"><img src="https://s2.loli.net/2022/08/06/Q4RubYN9OXlxkmz.png" alt="image-20220806144258083"></p><h2 id="_31-线程池中阻塞队列的作用-为什么先将任务加入队列-而不是直接创建线程" tabindex="-1"><a class="header-anchor" href="#_31-线程池中阻塞队列的作用-为什么先将任务加入队列-而不是直接创建线程"><span>31. 线程池中阻塞队列的作用,为什么先将任务加入队列,而不是直接创建线程</span></a></h2><p>线程池中阻塞队列的<strong>作用</strong>:</p><ol><li>因为线程池中的核心线程不会被销毁,所以使用阻塞队列来阻塞核心线程,让其不占用<strong>CPU</strong>的资源</li><li>同时使用阻塞队列,如果阻塞队列满了,在进入任务的话,会保存当前的任务</li></ol><p>为什么先加入队列:</p><p>​ 因为创建和销毁线程会占用资源,同时只用核心线程不会被销毁,所以加入队列中是最优的</p><h2 id="_32-线程池中的线程复用原理" tabindex="-1"><a class="header-anchor" href="#_32-线程池中的线程复用原理"><span>32. 线程池中的线程复用原理</span></a></h2><p>线程池是将线程和任务解耦,同时在线程池内部,相当于一个&quot;循环任务&quot;在循环任务中判断线程中是否有任务,如果有任务,就调用线程的<code>run()</code>方法,</p><h2 id="_33-spring是什么" tabindex="-1"><a class="header-anchor" href="#_33-spring是什么"><span>33. Spring是什么</span></a></h2><p><strong>Spring</strong>是<strong>轻量级</strong>的<strong>java EE</strong>的开源框架,是为了<strong>简化企业复杂的业务环境</strong>,同时<strong>Spring</strong>是一个<strong>分层架构</strong>,允许用户自己选择组件,同时也是一个<strong>容器框架,<strong>用来装</strong>javaBean</strong>,<strong>Spring</strong>的核心是IOC和AOP</p><p><img src="https://s2.loli.net/2022/08/06/sWlr79xv26PpagS.png" alt="image-20220806165104403"></p><h2 id="_34-对aop的理解" tabindex="-1"><a class="header-anchor" href="#_34-对aop的理解"><span>34. 对AOP的理解</span></a></h2><p><strong>AOP</strong>就是面向切面编程,在传统的<strong>oop</strong>上面,通常我们一个功能模块不只是只有核心功能,还有比如日志,异常处理等功能,如果在这么多代码上都加入重复的代码,就会造成代码的冗余,而使用<strong>AOP</strong>就将这些功能进行封装成一个切面,并且注入到业务代码中</p><h2 id="_35-对ioc的理解" tabindex="-1"><a class="header-anchor" href="#_35-对ioc的理解"><span>35. 对IOC的理解</span></a></h2><p><strong>IOC</strong>就是<strong>控制反转</strong>.原来传统的是自己<strong>new对象</strong>,然后自己调用<strong>依赖对象</strong>,都是自己进行对象的控制,使用了<strong>IOC</strong>之后,将对象的<strong>创建</strong>以及<strong>使用</strong>交给了<strong>IOC容器</strong>,由<strong>IOC容器</strong>来管理对象,在使用对象的时候会自动的创建对象</p>',69)]))}const i=o(e,[["render",l]]),p=JSON.parse('{"path":"/202306%E7%A7%8B%E6%8B%9B%E5%87%86%E5%A4%87-%E6%97%A7/a-5%E9%9D%A2%E8%AF%95%E9%A2%98.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"18. Java中的异常体系","slug":"_18-java中的异常体系","link":"#_18-java中的异常体系","children":[]},{"level":2,"title":"19. GC如何判断垃圾回收","slug":"_19-gc如何判断垃圾回收","link":"#_19-gc如何判断垃圾回收","children":[]},{"level":2,"title":"20. 线程的生命周期,线程的几种状态","slug":"_20-线程的生命周期-线程的几种状态","link":"#_20-线程的生命周期-线程的几种状态","children":[]},{"level":2,"title":"21. wait(),sleep(),join(),yield()","slug":"_21-wait-sleep-join-yield","link":"#_21-wait-sleep-join-yield","children":[]},{"level":2,"title":"22. 看待线程安全问题","slug":"_22-看待线程安全问题","link":"#_22-看待线程安全问题","children":[]},{"level":2,"title":"23. Thread和Runable","slug":"_23-thread和runable","link":"#_23-thread和runable","children":[]},{"level":2,"title":"24. 守护线程","slug":"_24-守护线程","link":"#_24-守护线程","children":[]},{"level":2,"title":"25. ThreadLocal的使用场景和原理","slug":"_25-threadlocal的使用场景和原理","link":"#_25-threadlocal的使用场景和原理","children":[]},{"level":2,"title":"26. ThreadLocal的内存泄漏问题","slug":"_26-threadlocal的内存泄漏问题","link":"#_26-threadlocal的内存泄漏问题","children":[]},{"level":2,"title":"27. 并发,并行和串行","slug":"_27-并发-并行和串行","link":"#_27-并发-并行和串行","children":[]},{"level":2,"title":"28. 并发的三大特性","slug":"_28-并发的三大特性","link":"#_28-并发的三大特性","children":[]},{"level":2,"title":"29. 为什么使用线程池,线程池的相关参数","slug":"_29-为什么使用线程池-线程池的相关参数","link":"#_29-为什么使用线程池-线程池的相关参数","children":[]},{"level":2,"title":"30. 线程池执行流程","slug":"_30-线程池执行流程","link":"#_30-线程池执行流程","children":[]},{"level":2,"title":"31. 线程池中阻塞队列的作用,为什么先将任务加入队列,而不是直接创建线程","slug":"_31-线程池中阻塞队列的作用-为什么先将任务加入队列-而不是直接创建线程","link":"#_31-线程池中阻塞队列的作用-为什么先将任务加入队列-而不是直接创建线程","children":[]},{"level":2,"title":"32. 线程池中的线程复用原理","slug":"_32-线程池中的线程复用原理","link":"#_32-线程池中的线程复用原理","children":[]},{"level":2,"title":"33. Spring是什么","slug":"_33-spring是什么","link":"#_33-spring是什么","children":[]},{"level":2,"title":"34. 对AOP的理解","slug":"_34-对aop的理解","link":"#_34-对aop的理解","children":[]},{"level":2,"title":"35. 对IOC的理解","slug":"_35-对ioc的理解","link":"#_35-对ioc的理解","children":[]}],"git":{"updatedTime":1751969860000,"contributors":[{"name":"Full","username":"Full","email":"2285288446@qq.com","commits":2,"url":"https://github.com/Full"}],"changelog":[{"hash":"d9f3e89ac0c7f9658e85d517b2e341155ebeb4a4","time":1751969860000,"email":"2285288446@qq.com","author":"Full","message":"构建修复"},{"hash":"46fbbb649a2b30164a6d253dd0f5cfcdf1657353","time":1751960301000,"email":"2285288446@qq.com","author":"Full","message":"第一次添加内容"}]},"filePathRelative":"202306秋招准备-旧/a-5面试题.md"}');export{i as comp,p as data};
