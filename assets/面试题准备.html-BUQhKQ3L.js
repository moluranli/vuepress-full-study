import{_ as s,c as a,d as p,o as e}from"./app-zW3Lf4SL.js";const t={};function l(c,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="hashmap学习" tabindex="-1"><a class="header-anchor" href="#hashmap学习"><span>HashMap学习</span></a></h1><h2 id="_1、hashmap底层原理" tabindex="-1"><a class="header-anchor" href="#_1、hashmap底层原理"><span>1、HashMap底层原理</span></a></h2><h3 id="_1-1-hashmap是如何工作的" tabindex="-1"><a class="header-anchor" href="#_1-1-hashmap是如何工作的"><span>1.1 HashMap是如何工作的？</span></a></h3><p>HashMap底层是基于hash表实现的数据结构，主要用来存储键值对，在1.7之前是数组+链表的形式，在1.8及以后是数组+链表+红黑树的形式，当添加元素的时候，hash对象会进行初始化操作，如果没有指定容量就是16，当添加元素的时候，会首先计算数组的下标来确定元素要添加的位置，通过扰动算法加上位运算，扰动算法是使用hash与hash右移16位，然后hash&amp;（n-1）主要是为了使得元素平均分配，因为，hash&amp;(n-1)主要是hash的低位参与运算的，扰动算法使得这里的hash就是之前hash低位与高位运算的结果，然后得出索引位置后会判断是否有元素，没有就添加，如果有就判断key值是否相同，如果相同就覆盖，并返回原来的value，如果不相同就一直遍历，结果没有就添加，并且如果元素的数量超过数组容量*0.75就会触发扩容，将原数组变为2倍，并且重新计算索引位置，在1.8后添加了红黑树，在链表长度大于8并且，数组容量大于等于64的时候，链表就会转换为红黑树，并且重新排列数据</p><h2 id="_1、-自定义hashmap实现类-数组-链表-尾插法" tabindex="-1"><a class="header-anchor" href="#_1、-自定义hashmap实现类-数组-链表-尾插法"><span>1、 自定义HashMap实现类（数组+链表+尾插法）</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>demo</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//自定义hashmap，数组加链表+尾插法+扩容</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//创建数组</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> initLen <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//表示元素数量</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">MyHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>initLen<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">MyHashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>initCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//扩容操作</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token keyword">int</span> newCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> table<span class="token punctuation">.</span>length<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//扩容是创建新的table，然后将旧的table的数据全部移入新的table中</span></span>
<span class="line">        <span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newtable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>newCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//遍历原table</span></span>
<span class="line">        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> oldCapacity<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Node</span> current <span class="token operator">=</span> table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">while</span><span class="token punctuation">(</span>current <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">//这里使用尾插法(尾插法需要每次遍历新表找到尾节点，并赋值)</span></span>
<span class="line">                <span class="token comment">//记录下current下一个节点的位置，方便下次循环</span></span>
<span class="line">                <span class="token class-name">Node</span> next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span></span>
<span class="line">                <span class="token comment">//如果新表索引位为空，直接赋值，并断链表</span></span>
<span class="line">                <span class="token keyword">int</span> hash <span class="token operator">=</span> current<span class="token punctuation">.</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">int</span> index <span class="token operator">=</span> hash <span class="token operator">&amp;</span> <span class="token punctuation">(</span>newtable<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">if</span><span class="token punctuation">(</span>newtable<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    current<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">                    newtable<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> current<span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span></span>
<span class="line">                    current<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token class-name">Node</span> newtablenewnode <span class="token operator">=</span> newtable<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token keyword">while</span><span class="token punctuation">(</span>newtablenewnode<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                        newtablenewnode <span class="token operator">=</span> newtablenewnode<span class="token punctuation">.</span>next<span class="token punctuation">;</span></span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line">                    newtablenewnode<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">                current <span class="token operator">=</span> next<span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        table <span class="token operator">=</span> newtable<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//put方法</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//首先判断key是否为null</span></span>
<span class="line">        <span class="token comment">//首先判断是否扩容</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>size <span class="token operator">&gt;=</span> table<span class="token punctuation">.</span>length<span class="token operator">*</span><span class="token number">0.75</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">//判断table是否为null</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>table <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> table<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>initLen<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//通过hashcode计算数组下标，使用扰动函数</span></span>
<span class="line">        <span class="token keyword">int</span> hash <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//扰动函数，得出的hash的低位是高位和低位运算的结果</span></span>
<span class="line">        <span class="token keyword">int</span> index <span class="token operator">=</span> hash <span class="token operator">&amp;</span> <span class="token punctuation">(</span>table<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Node</span> current <span class="token operator">=</span> table<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Node</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 找到下标位后，遍历链表，找到key相同的元素，如果相同覆盖，没找到则新增节点，使用尾插法</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">V</span> oldValue <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">V</span><span class="token punctuation">)</span> current<span class="token punctuation">.</span>value<span class="token punctuation">;</span></span>
<span class="line">                current<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            prev <span class="token operator">=</span> current<span class="token punctuation">;</span></span>
<span class="line">            current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        newNode<span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span></span>
<span class="line">        newNode<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//如果首节点为空，插入新节点，否者使用尾插法加到最后</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>prev <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            table<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> newNode<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span></span>
<span class="line">            prev<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        size<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>table <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> table<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">//计算下标</span></span>
<span class="line">        <span class="token keyword">int</span> hash <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span> index <span class="token operator">=</span> hash <span class="token operator">&amp;</span> <span class="token punctuation">(</span>table<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Node</span> current <span class="token operator">=</span> table<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">V</span><span class="token punctuation">)</span> current<span class="token punctuation">.</span>value<span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//链表节点</span></span>
<span class="line">    <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">public</span> <span class="token class-name">K</span> key<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">public</span> <span class="token class-name">V</span> value<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6)]))}const i=s(t,[["render",l]]),u=JSON.parse('{"path":"/202507%E7%A4%BE%E6%8B%9B%E5%87%86%E5%A4%87/%E9%9D%A2%E8%AF%95%E9%A2%98%E5%87%86%E5%A4%87.html","title":"HashMap学习","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"1、HashMap底层原理","slug":"_1、hashmap底层原理","link":"#_1、hashmap底层原理","children":[{"level":3,"title":"1.1 HashMap是如何工作的？","slug":"_1-1-hashmap是如何工作的","link":"#_1-1-hashmap是如何工作的","children":[]}]},{"level":2,"title":"1、 自定义HashMap实现类（数组+链表+尾插法）","slug":"_1、-自定义hashmap实现类-数组-链表-尾插法","link":"#_1、-自定义hashmap实现类-数组-链表-尾插法","children":[]}],"git":{"updatedTime":1752668942000,"contributors":[{"name":"Full","username":"Full","email":"2285288446@qq.com","commits":4,"url":"https://github.com/Full"}],"changelog":[{"hash":"bf063a0766fa1e27b60a16d0d71410c23fe457ca","time":1752668942000,"email":"2285288446@qq.com","author":"Full","message":"构建修复"},{"hash":"8db71ac2a46bd5a1eaf351b650925f5d4a387069","time":1752664161000,"email":"2285288446@qq.com","author":"Full","message":"学习更新"},{"hash":"fe30d710a47d7eb121735c21d784875542e37055","time":1752572699000,"email":"2285288446@qq.com","author":"Full","message":"面试准备提交"},{"hash":"46fbbb649a2b30164a6d253dd0f5cfcdf1657353","time":1751960301000,"email":"2285288446@qq.com","author":"Full","message":"第一次添加内容"}]},"filePathRelative":"202507社招准备/面试题准备.md"}');export{i as comp,u as data};
