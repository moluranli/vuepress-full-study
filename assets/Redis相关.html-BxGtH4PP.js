import{_ as a,c as s,d as i,o as d}from"./app-zW3Lf4SL.js";const l={};function p(r,e){return d(),s("div",null,e[0]||(e[0]=[i('<h1 id="redis相关" tabindex="-1"><a class="header-anchor" href="#redis相关"><span>Redis相关</span></a></h1><p><img src="https://freeimghost.net/images/2025/07/30/image.png" alt="image"></p><h2 id="_1、什么是缓存穿透" tabindex="-1"><a class="header-anchor" href="#_1、什么是缓存穿透"><span>1、什么是缓存穿透</span></a></h2><p><code>缓存穿透</code>时查询大量数据时，Redis没有数据，造成一直查询数据库，造成数据库压力巨大</p><h3 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案"><span>解决方案</span></a></h3><p>1、将空值也存入Redis当中，这样查询Redis时就会返回空值</p><p>2、使用布隆过滤器，让查询先经过布隆过滤器，如果布隆过滤器没查到，代表数据库不存在数据，就直接返回空，如果有数据代表存在，则查询Redis，如果Redis有就返回，没有就查数据库，然后返回数据，并且重新缓存Redis，并将数据加入布隆过滤器</p><blockquote><p>布隆过滤器存储一个数据时，对一个值使用不用hash算法进行hash计算数据下标，并将数据都存入下标中，置为1，查询时使用相同的hash算法进行计算，对象数据下标有数据，代表存在数据</p><p>对于布隆过滤器的初始化，可以在项目启动时候初始化，并且采用定时任务的方式，每天删除重置布隆过滤器</p></blockquote><h2 id="_2、什么时缓存击穿" tabindex="-1"><a class="header-anchor" href="#_2、什么时缓存击穿"><span>2、什么时缓存击穿</span></a></h2><p><code>缓存击穿</code>就是在Redis中，某一条数据忽然过期，同一时间，大量请求查询，造成数据库压力巨大</p><h3 id="解决方案-1" tabindex="-1"><a class="header-anchor" href="#解决方案-1"><span>解决方案</span></a></h3><p>1、加互斥锁，当第一条请求进来的时候，发现Redis中没有查询到数据，这个时候就加入互斥锁，然后冲mysql中将数据更新到Redis中，然后释放锁，过程中如果有其他线程进来一直重试，直到第一个线程释放锁</p><p>2、提前缓存，使用定时任务定时查询过期数据，在过期时间一定范围内更新数据</p><p>3、使用逻辑过期，不设置Redis过期时间，而是将过期时间加到数据中，当请求进来时候，发现Redis中没有数据，就加互斥锁，然后异步处理Redis数据更新，在异步处理中释放锁，而该线程则返回旧数据，可能导致部分数据不一致问题</p><h2 id="_3、什么是缓存雪崩" tabindex="-1"><a class="header-anchor" href="#_3、什么是缓存雪崩"><span>3、什么是缓存雪崩</span></a></h2><p>缓存雪崩是指同一时间过个key同时失效，或者Redis宕机，造成服务器压力大</p><h3 id="解决方法" tabindex="-1"><a class="header-anchor" href="#解决方法"><span>解决方法</span></a></h3><p>1、给过期时间设置随机值，如果1到5分钟，保证key不会同一时间大量过期</p><p>2、使用Redis集群</p><p>3、使用多级缓存</p><h2 id="_4、redis缓存的读写一致性问题" tabindex="-1"><a class="header-anchor" href="#_4、redis缓存的读写一致性问题"><span>4、Redis缓存的读写一致性问题</span></a></h2><p>读写一致性问题是指保证Redis缓存中数据与数据库中数据相同</p><p>比如在修改数据的场景中</p><p>1、如果先修改数据，在更新缓存，那么如果修改前，缓存已经失效，此时查的时候会将老数据加入缓存，在没加之前，数据库修改完，删除缓存，然后查询的时候的数据加入缓存，造成数据库和缓存不一致</p><p><img src="https://freeimghost.net/images/2025/07/30/imaged98b05fd647e2ef8.png" alt="image"></p><p>2、如果先删除缓存，再修改数据库，那么删除缓存后，查询的数据查的是数据库老的数据，并加入缓存，缓存数据是老的，然后数据库修改是新的</p><p><img src="https://freeimghost.net/images/2025/07/30/image3715281599fe611a.png" alt="image"></p><h3 id="解决redis一致性问题" tabindex="-1"><a class="header-anchor" href="#解决redis一致性问题"><span>解决redis一致性问题</span></a></h3><p>1、延迟双删，最后一次删除是为了保证缓存数据是修改前数据库的数据，延迟是为了保证Redis数据库的主从复制过程中产生的问题</p><p>2、使用互斥锁（<strong>强一致性</strong>），读的时候给对应key加锁，如果redis没数据，从数据库中获取，然后更新缓存，然后释放锁，写的时候，先加锁，写完后，删除缓存在释放锁</p><p>3、比2更优的是读写锁（<strong>强一致性</strong>），因为使用缓存本来就是读多写少，读的时候加入读锁，不能让其他线程修改数据库数据，可以读，写的时候加入写锁，其他线程不能读也不能写</p><p>4、也可以采用消息队列的方式，当数据库写完之后，给mq发送消息，使用mq来更新缓存</p><h2 id="_5、redis的持久化策略" tabindex="-1"><a class="header-anchor" href="#_5、redis的持久化策略"><span>5、Redis的持久化策略</span></a></h2><h3 id="_1、rdb" tabindex="-1"><a class="header-anchor" href="#_1、rdb"><span>1、RDB</span></a></h3><p>RDB是备份Redis内存中的数据到磁盘中，原理是执行命令时会fork一个子进程，并且此时操作系统会将对应的物理内存地址置为只读，子进程负者将这块物理内存中的数据保存到磁盘中，主进程负责处理命令，这个时候如果主进程或者子进程想要修改数据，那么操作系统就会重新分配一块物理地址，并且将原内存信息负责到改物理地址上，并且更新Redis主进程的页表，之后主进程的读和写都在新的地址上</p><h3 id="_2、aof" tabindex="-1"><a class="header-anchor" href="#_2、aof"><span>2、AOF</span></a></h3><p>AOF原理是记录Redis的执行成功的写命令、他恢复数据慢，但是丢失数据的风险低</p><h2 id="_6、redis的过期策略" tabindex="-1"><a class="header-anchor" href="#_6、redis的过期策略"><span>6、Redis的过期策略</span></a></h2><p>惰性删除和过期删除，两种配合使用，惰性就是等到查询的时候再判断删除，定时就是定时删除</p><h2 id="_7、redis的集群方案" tabindex="-1"><a class="header-anchor" href="#_7、redis的集群方案"><span>7、Redis的集群方案</span></a></h2><h3 id="_1、主从复制" tabindex="-1"><a class="header-anchor" href="#_1、主从复制"><span>1、主从复制</span></a></h3><p>主从复制时为了提升单机时候的并发量，主服务器进行写操作，从服务器进行读操作</p><p><code>主从复制流程</code>： 有两个一个时全量同步，一个是增量同步</p><p>全量同步涉及第一次同步的时候，首先从节点向主节点发送请求，请求同步数据，并且会将application id和offset发送给主节点，主节点根据这两个数据判断是不是第一次同步，如果时第一次同步，主节点就会进行bgsave操作，也就时进行RDB，会生成RDB文件，并且将RDB文件传输给从节点，让从节点同步数据，在主节点生成RDB文件和发送给从节点的过程中，主节点会将命令放在放在一块缓存区中，待过程完成后，主节点会将缓冲区的命令发送给从节点。</p><p>增量同步在不是第一次同步的时候，主从节点都有offset，主节点会根据这个将不同offset的命令发送给从节点，让从节点同步数据</p><h2 id="_2、哨兵机制" tabindex="-1"><a class="header-anchor" href="#_2、哨兵机制"><span>2、哨兵机制</span></a></h2><p>哨兵机制就是相当于有一个或者多个哨兵来监听主从节点的状态，如果主节点丢失，就会通过选举的方式选出一个新的主节点，还可以通知客户端某个节点丢失</p><p><code>脑裂问题</code></p><blockquote><p>脑裂问题是指如果一个哨兵因为网络原因监听不到主节点，会认为这个主节点丢失，并且会通过选举选取一个新的主节点，但是原来的主节点任然在接受数据，当网络恢复时，就会出现两个主节点</p></blockquote><p>解决方法</p><p>通过设置两个参数，1、必须至少有一个从节点，保证当旧主节点没有从节点的时候，就会拒接写入</p><p>2、设置复制和同步时间小于10ms，保证从节点的数据和主节点尽量保持一致</p><p>不能完全杜绝脑裂的发生，但是可以极大的避免</p><h2 id="_3、分片策略" tabindex="-1"><a class="header-anchor" href="#_3、分片策略"><span>3、分片策略</span></a></h2><p>设置多个master主机，每个master有多个slave节点，每个节点之间可以进行通信</p><p>数据存入时，给不同的master分配不同的hash桶</p>',56)]))}const h=a(l,[["render",p]]),t=JSON.parse('{"path":"/202507%E7%A4%BE%E6%8B%9B%E5%87%86%E5%A4%87/Redis%E7%9B%B8%E5%85%B3.html","title":"Redis相关","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"1、什么是缓存穿透","slug":"_1、什么是缓存穿透","link":"#_1、什么是缓存穿透","children":[{"level":3,"title":"解决方案","slug":"解决方案","link":"#解决方案","children":[]}]},{"level":2,"title":"2、什么时缓存击穿","slug":"_2、什么时缓存击穿","link":"#_2、什么时缓存击穿","children":[{"level":3,"title":"解决方案","slug":"解决方案-1","link":"#解决方案-1","children":[]}]},{"level":2,"title":"3、什么是缓存雪崩","slug":"_3、什么是缓存雪崩","link":"#_3、什么是缓存雪崩","children":[{"level":3,"title":"解决方法","slug":"解决方法","link":"#解决方法","children":[]}]},{"level":2,"title":"4、Redis缓存的读写一致性问题","slug":"_4、redis缓存的读写一致性问题","link":"#_4、redis缓存的读写一致性问题","children":[{"level":3,"title":"解决redis一致性问题","slug":"解决redis一致性问题","link":"#解决redis一致性问题","children":[]}]},{"level":2,"title":"5、Redis的持久化策略","slug":"_5、redis的持久化策略","link":"#_5、redis的持久化策略","children":[{"level":3,"title":"1、RDB","slug":"_1、rdb","link":"#_1、rdb","children":[]},{"level":3,"title":"2、AOF","slug":"_2、aof","link":"#_2、aof","children":[]}]},{"level":2,"title":"6、Redis的过期策略","slug":"_6、redis的过期策略","link":"#_6、redis的过期策略","children":[]},{"level":2,"title":"7、Redis的集群方案","slug":"_7、redis的集群方案","link":"#_7、redis的集群方案","children":[{"level":3,"title":"1、主从复制","slug":"_1、主从复制","link":"#_1、主从复制","children":[]}]},{"level":2,"title":"2、哨兵机制","slug":"_2、哨兵机制","link":"#_2、哨兵机制","children":[]},{"level":2,"title":"3、分片策略","slug":"_3、分片策略","link":"#_3、分片策略","children":[]}],"git":{"updatedTime":1753963124000,"contributors":[{"name":"Full","username":"Full","email":"2285288446@qq.com","commits":1,"url":"https://github.com/Full"}],"changelog":[{"hash":"af954f9d6aa2886ca3e3f847f0959158cc668237","time":1753963124000,"email":"2285288446@qq.com","author":"Full","message":"提交Redis学习"}]},"filePathRelative":"202507社招准备/Redis相关.md"}');export{h as comp,t as data};
